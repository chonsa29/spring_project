<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.mapper.CommunityMapper">

	<resultMap id="recipeResultMap" type="map">
	    <result property="contents" column="contents" jdbcType="CLOB"/>
	</resultMap>

	
	<select id="selectRecipetList" parameterType="hashmap" resultType="com.example.demo.model.Recipe">
		SELECT RP.POST_ID, RP.TITLE, RP.CDATETIME, RP.CNT, COUNT(RL.USER_ID) AS LIKES
		FROM RECIPE_POST RP
		LEFT JOIN RECIPE_LIKES RL ON RP.POST_ID = RL.POST_ID
		WHERE 1=1
		<if test="searchOption != null and searchOption == 'all'">
			AND (TITLE LIKE '%' || #{searchKeyword} || '%'
			OR CONTENTS LIKE '%' || #{searchKeyword} || '%')
		</if>
		<if test="searchOption != null and searchOption == 'title'">
			AND TITLE LIKE '%' || #{searchKeyword} || '%'
		</if>
		<if test="searchOption != null and searchOption == 'contents'">
			AND CONTENTS LIKE '%' || #{searchKeyword} || '%'
		</if>
		GROUP BY RP.POST_ID, RP.TITLE, RP.CDATETIME, RP.CNT
		ORDER BY CDATETIME DESC
		OFFSET #{page} ROWS FETCH NEXT #{pageSize} ROWS ONLY
	</select>
	
	<select id="selectRecipe" parameterType="hashmap" resultType="int">
		SELECT COUNT(*)
		FROM RECIPE_POST
		WHERE 1=1
		<if test="searchOption != null and searchOption == 'all'">
			AND (TITLE LIKE '%' || #{searchKeyword} || '%'
			OR CONTENTS LIKE '%' || #{searchKeyword} || '%')
		</if>
		<if test="searchOption != null and searchOption == 'title'">
			AND TITLE LIKE '%' || #{searchKeyword} || '%'
		</if>
		<if test="searchOption != null and searchOption == 'contents'">
			AND CONTENTS LIKE '%' || #{searchKeyword} || '%'
		</if>
	</select>
	
	<select id="selectRecipeView" parameterType="hashmap" resultType="com.example.demo.model.Recipe">
		SELECT MAIN.*, (SELECT CONTENTS 
		                FROM RECIPE_POST 
		                WHERE POST_ID = MAIN.POST_ID) AS CONTENTS
		FROM (
		    SELECT 
		        RP.POST_ID, 
		        RP.TITLE, 
		        RP.COOKING_TIME, 
		        RP.SERVINGS, 
		        RP.DIFFICULTY, 
		        RP.INSTRUCTIONS, 
		        RP.CNT,
		        RP.CDATETIME,
		        RP.USERID,
		        COUNT(RL.USER_ID) AS LIKES
		    FROM RECIPE_POST RP
		    LEFT JOIN RECIPE_LIKES RL ON RP.POST_ID = RL.POST_ID
		    WHERE RP.POST_ID = #{postId}
		    GROUP BY RP.POST_ID, RP.TITLE, RP.COOKING_TIME, RP.SERVINGS, RP.DIFFICULTY, RP.INSTRUCTIONS, 
		    					RP.CNT, RP.CDATETIME, RP.USERID
		) MAIN
	</select>
	
	<select id="recipeEditView" parameterType="hashmap" resultType="com.example.demo.model.Recipe">
		SELECT * FROM RECIPE_POST
		WHERE POST_ID = #{postId}
	</select>
	
	<update id="updateCnt" parameterType="hashmap">
		UPDATE RECIPE_POST
		SET
			CNT = CNT + 1
		WHERE POST_ID = #{postId}
	</update>
	
	<insert id="insertRecipe" parameterType="hashmap">
        INSERT INTO RECIPE_POST
        VALUES (RECIPE_SEQ.NEXTVAL, #{instructions}, #{cookingTime}, #{servings}, 
        		#{difficulty}, #{title}, #{userId}, 0, SYSDATE, 0, 1, #{contents, jdbcType=CLOB})
    </insert>
    
    <select id="checkLike" parameterType="hashmap" resultType="int">
	    SELECT COUNT(*)
	    FROM RECIPE_LIKES
	    WHERE POST_ID = #{postId} AND USER_ID = #{userId}
	</select>
	
	<insert id="insertLike" parameterType="hashmap">
	    INSERT INTO RECIPE_LIKES (POST_ID, USER_ID)
	    VALUES (#{postId}, #{userId})
	</insert>
	
	<delete id="deleteLike" parameterType="hashmap">
	    DELETE FROM RECIPE_LIKES
	    WHERE POST_ID = #{postId} AND USER_ID = #{userId}
	</delete>
	
	<select id="selectLikes" parameterType="string" resultType="int">
	    SELECT COUNT(*)
	    FROM RECIPE_LIKES
	    WHERE POST_ID = #{postId}
	</select>
	
	<delete id="deleteRecipe" parameterType="hashmap">
		DELETE
		FROM RECIPE_POST
		WHERE POST_ID = #{postId}
	</delete>
	
	<update id="updateRecipe" parameterType="com.example.demo.model.Recipe">
	    UPDATE RECIPE_POST
	    SET 
	        INSTRUCTIONS = #{instructions}, 
	        COOKING_TIME = #{cookingTime}, 
	        SERVINGS = #{servings}, 
	        DIFFICULTY = #{difficulty}, 
	        TITLE = #{title},  
	        CONTENTS = #{contents, jdbcType=CLOB}, 
	    WHERE POST_ID = #{postId} <!-- 수정할 레시피를 식별하는 postId -->
	</update>


</mapper>




